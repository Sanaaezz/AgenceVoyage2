<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[

'App__Entity__Categorie__CLASSMETADATA__' => 0,
'App__Entity__Contact__CLASSMETADATA__' => 1,
'App__Entity__Destination__CLASSMETADATA__' => 2,
'App__Entity__Voyage__CLASSMETADATA__' => 3,
'App__Entity__Statut__CLASSMETADATA__' => 4,
'App__Entity__Utilisateur__CLASSMETADATA__' => 5,

], [

0 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Categorie',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\CategorieRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom_categorie' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom_categorie' => 'nom_categorie',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom_categorie' => 'nom_categorie',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'categorie',
                    ],
                ],
                'associationMappings' => [
                    [
                        'voyages' => $o[3],
                    ],
                ],
                'idGenerator' => [
                    $o[4],
                ],
                'name' => [
                    'App\\Entity\\Categorie',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom_categorie',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom_categorie',
                ],
                'length' => [
                    2 => 255,
                ],
                'fetch' => [
                    3 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\Categorie',
                ],
                'mappedBy' => [
                    3 => 'categorie',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'voyages',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Voyage',
                ],
            ],
        ],
        $o[0],
        []
    );
},
1 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Contact',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ContactRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'message_contact' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'message_contact' => 'message_contact',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'message_contact' => 'message_contact',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'contact',
                    ],
                ],
                'associationMappings' => [
                    [
                        'voyage' => $o[3],
                        'statut' => $o[5],
                        'user' => $o[7],
                    ],
                ],
                'idGenerator' => [
                    $o[9],
                ],
                'name' => [
                    'App\\Entity\\Contact',
                    4 => 'voyage_id',
                    6 => 'statut_id',
                    8 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'message_contact',
                ],
                'columnName' => [
                    1 => 'id',
                    'message_contact',
                ],
                'length' => [
                    2 => 255,
                ],
                'nullable' => [
                    2 => true,
                ],
                'fetch' => [
                    3 => 2,
                    5 => 2,
                    7 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\Contact',
                    5 => 'App\\Entity\\Contact',
                    7 => 'App\\Entity\\Contact',
                ],
                'inversedBy' => [
                    3 => 'contact',
                    5 => 'contacts',
                    7 => 'contacts',
                ],
                'sourceToTargetKeyColumns' => [
                    3 => [
                        'voyage_id' => 'id',
                    ],
                    5 => [
                        'statut_id' => 'id',
                    ],
                    7 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    3 => [
                        'id' => 'voyage_id',
                    ],
                    5 => [
                        'id' => 'statut_id',
                    ],
                    7 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    3 => [
                        $o[4],
                    ],
                    5 => [
                        $o[6],
                    ],
                    7 => [
                        $o[8],
                    ],
                ],
                'joinColumnFieldNames' => [
                    3 => [
                        'voyage_id' => 'voyage_id',
                    ],
                    5 => [
                        'statut_id' => 'statut_id',
                    ],
                    7 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'referencedColumnName' => [
                    4 => 'id',
                    6 => 'id',
                    8 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'voyage',
                    5 => 'statut',
                    7 => 'user',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Voyage',
                    5 => 'App\\Entity\\Statut',
                    7 => 'App\\Entity\\Utilisateur',
                ],
            ],
        ],
        $o[0],
        []
    );
},
2 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Destination',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\DestinationRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'pays' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'pays' => 'pays',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'pays' => 'pays',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'destination',
                    ],
                ],
                'associationMappings' => [
                    [
                        'voyages' => $o[3],
                    ],
                ],
                'idGenerator' => [
                    $o[4],
                ],
                'name' => [
                    'App\\Entity\\Destination',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'pays',
                ],
                'columnName' => [
                    1 => 'id',
                    'pays',
                ],
                'length' => [
                    2 => 255,
                ],
                'fetch' => [
                    3 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\Destination',
                ],
                'mappedBy' => [
                    3 => 'destination',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'voyages',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Voyage',
                ],
            ],
        ],
        $o[0],
        []
    );
},
3 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinTableMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinTableMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinTableMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Voyage',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\VoyageRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom_voyage' => $o[2],
                        'photo_voyage' => $o[3],
                        'duree_voyage' => $o[4],
                        'dateDepart_voyage' => $o[5],
                        'dateRetour_voyage' => $o[6],
                        'visibility_voyage' => $o[7],
                        'prix_voyage' => $o[8],
                        'description_voyage' => $o[9],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom_voyage' => 'nom_voyage',
                        'photo_voyage' => 'photo_voyage',
                        'duree_voyage' => 'duree_voyage',
                        'date_depart_voyage' => 'dateDepart_voyage',
                        'date_retour_voyage' => 'dateRetour_voyage',
                        'visibility_voyage' => 'visibility_voyage',
                        'prix_voyage' => 'prix_voyage',
                        'description_voyage' => 'description_voyage',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom_voyage' => 'nom_voyage',
                        'photo_voyage' => 'photo_voyage',
                        'duree_voyage' => 'duree_voyage',
                        'dateDepart_voyage' => 'date_depart_voyage',
                        'dateRetour_voyage' => 'date_retour_voyage',
                        'visibility_voyage' => 'visibility_voyage',
                        'prix_voyage' => 'prix_voyage',
                        'description_voyage' => 'description_voyage',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'voyage',
                    ],
                ],
                'associationMappings' => [
                    [
                        'categorie' => $o[10],
                        'destination' => $o[14],
                        'contact' => $o[18],
                        'user' => $o[19],
                    ],
                ],
                'idGenerator' => [
                    $o[21],
                ],
                'name' => [
                    'App\\Entity\\Voyage',
                    11 => 'voyage_categorie',
                    'voyage_id',
                    'categorie_id',
                    15 => 'voyage_destination',
                    'voyage_id',
                    'destination_id',
                    20 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'integer',
                    'date',
                    'date',
                    'boolean',
                    'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom_voyage',
                    'photo_voyage',
                    'duree_voyage',
                    'dateDepart_voyage',
                    'dateRetour_voyage',
                    'visibility_voyage',
                    'prix_voyage',
                    'description_voyage',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom_voyage',
                    'photo_voyage',
                    'duree_voyage',
                    'date_depart_voyage',
                    'date_retour_voyage',
                    'visibility_voyage',
                    'prix_voyage',
                    'description_voyage',
                ],
                'length' => [
                    2 => 50,
                    9 => 255,
                ],
                'nullable' => [
                    5 => true,
                    true,
                    true,
                    true,
                    true,
                ],
                'fetch' => [
                    10 => 2,
                    14 => 2,
                    18 => 2,
                    2,
                ],
                'isOnDeleteCascade' => [
                    10 => true,
                    14 => true,
                ],
                'sourceEntity' => [
                    10 => 'App\\Entity\\Voyage',
                    14 => 'App\\Entity\\Voyage',
                    18 => 'App\\Entity\\Voyage',
                    'App\\Entity\\Voyage',
                ],
                'inversedBy' => [
                    10 => 'voyages',
                    14 => 'voyages',
                    19 => 'voyages',
                ],
                'joinTable' => [
                    10 => $o[11],
                    14 => $o[15],
                ],
                'joinTableColumns' => [
                    10 => [
                        'voyage_id',
                        'categorie_id',
                    ],
                    14 => [
                        'voyage_id',
                        'destination_id',
                    ],
                ],
                'relationToSourceKeyColumns' => [
                    10 => [
                        'voyage_id' => 'id',
                    ],
                    14 => [
                        'voyage_id' => 'id',
                    ],
                ],
                'relationToTargetKeyColumns' => [
                    10 => [
                        'categorie_id' => 'id',
                    ],
                    14 => [
                        'destination_id' => 'id',
                    ],
                ],
                'joinColumns' => [
                    11 => [
                        $o[12],
                    ],
                    15 => [
                        $o[16],
                    ],
                    19 => [
                        $o[20],
                    ],
                ],
                'inverseJoinColumns' => [
                    11 => [
                        $o[13],
                    ],
                    15 => [
                        $o[17],
                    ],
                ],
                'onDelete' => [
                    12 => 'CASCADE',
                    'CASCADE',
                    16 => 'CASCADE',
                    'CASCADE',
                ],
                'referencedColumnName' => [
                    12 => 'id',
                    'id',
                    16 => 'id',
                    'id',
                    20 => 'id',
                ],
                'mappedBy' => [
                    18 => 'voyage',
                ],
                'sourceToTargetKeyColumns' => [
                    19 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    19 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumnFieldNames' => [
                    19 => [
                        'user_id' => 'user_id',
                    ],
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    10 => 'categorie',
                    14 => 'destination',
                    18 => 'contact',
                    'user',
                ],
                'targetEntity' => [
                    10 => 'App\\Entity\\Categorie',
                    14 => 'App\\Entity\\Destination',
                    18 => 'App\\Entity\\Contact',
                    'App\\Entity\\Utilisateur',
                ],
            ],
        ],
        $o[0],
        []
    );
},
4 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Statut',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\StatutRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'avancement_statut' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'avancement_statut' => 'avancement_statut',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'avancement_statut' => 'avancement_statut',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'statut',
                    ],
                ],
                'associationMappings' => [
                    [
                        'contacts' => $o[3],
                    ],
                ],
                'idGenerator' => [
                    $o[4],
                ],
                'name' => [
                    'App\\Entity\\Statut',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'avancement_statut',
                ],
                'columnName' => [
                    1 => 'id',
                    'avancement_statut',
                ],
                'length' => [
                    2 => 255,
                ],
                'fetch' => [
                    3 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\Statut',
                ],
                'mappedBy' => [
                    3 => 'statut',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'contacts',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Contact',
                ],
            ],
        ],
        $o[0],
        []
    );
},
5 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Utilisateur',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\UtilisateurRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'email' => $o[2],
                        'roles' => $o[3],
                        'password' => $o[4],
                        'nom_utilisateur' => $o[5],
                        'prenom_utilisateur' => $o[6],
                        'telephone_utilisateur' => $o[7],
                        'isVerified' => $o[8],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'email' => 'email',
                        'roles' => 'roles',
                        'password' => 'password',
                        'nom_utilisateur' => 'nom_utilisateur',
                        'prenom_utilisateur' => 'prenom_utilisateur',
                        'telephone_utilisateur' => 'telephone_utilisateur',
                        'is_verified' => 'isVerified',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'email' => 'email',
                        'roles' => 'roles',
                        'password' => 'password',
                        'nom_utilisateur' => 'nom_utilisateur',
                        'prenom_utilisateur' => 'prenom_utilisateur',
                        'telephone_utilisateur' => 'telephone_utilisateur',
                        'isVerified' => 'is_verified',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'utilisateur',
                        'uniqueConstraints' => [
                            'UNIQ_IDENTIFIER_EMAIL' => [
                                'fields' => [
                                    'email',
                                ],
                            ],
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'voyages' => $o[9],
                        'contacts' => $o[10],
                    ],
                ],
                'idGenerator' => [
                    $o[11],
                ],
                'name' => [
                    'App\\Entity\\Utilisateur',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'json',
                    'string',
                    'string',
                    'string',
                    'string',
                    'boolean',
                ],
                'fieldName' => [
                    1 => 'id',
                    'email',
                    'roles',
                    'password',
                    'nom_utilisateur',
                    'prenom_utilisateur',
                    'telephone_utilisateur',
                    'isVerified',
                ],
                'columnName' => [
                    1 => 'id',
                    'email',
                    'roles',
                    'password',
                    'nom_utilisateur',
                    'prenom_utilisateur',
                    'telephone_utilisateur',
                    'is_verified',
                ],
                'length' => [
                    2 => 180,
                    5 => 255,
                    255,
                    20,
                ],
                'fetch' => [
                    9 => 2,
                    2,
                ],
                'sourceEntity' => [
                    9 => 'App\\Entity\\Utilisateur',
                    'App\\Entity\\Utilisateur',
                ],
                'mappedBy' => [
                    9 => 'user',
                    'user',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    9 => 'voyages',
                    'contacts',
                ],
                'targetEntity' => [
                    9 => 'App\\Entity\\Voyage',
                    'App\\Entity\\Contact',
                ],
            ],
        ],
        $o[0],
        []
    );
},

]];
